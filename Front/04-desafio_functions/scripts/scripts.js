function some(n1, n2) {
    /* 
    Objetivo: Criar uma funÃ§Ã£o que some dois nÃºmeros, 
    mas retorne false se qualquer um dos argumentos for uma string.

    ğŸ”¹Teste com nÃºmeros: some(2, 3) deve retornar 5.
    ğŸ”¹Teste com strings: some("2", 3) deve retornar false.
    ğŸ”¹Teste com strings: some(2, "3") deve retornar false.
    */
};

function hello(name) {
    /*
    Objetivo: Criar uma funÃ§Ã£o que retorne uma string/texto personalizada, 
    mas retorne false se o argumento nÃ£o for uma string.

    ğŸ”¹Teste com uma string: "Jonh" 
        hello("John") 
        
    ğŸ”¹SaÃ­da esperada:
        "hello, John".

    ğŸ”¹Teste com um nÃºmero: 123
        hello(123) 
    
    ğŸ”¹SaÃ­da esperada:
        false
    */
}

function totalNum(array) {
    /*
    Objetivo: Criar uma funÃ§Ã£o que calcule a soma de todos os nÃºmeros em um array, 
    mas retorne false se o argumento nÃ£o for um array.

    ğŸ”¹Teste com um array de nÃºmeros: 
        [1, 2, 3]
    
    ğŸ”¹SaÃ­da:
        6

    ğŸ”¹Teste com um argumento que nÃ£o Ã© um array:
        "123" 

    ğŸ”¹SaÃ­da:
        false.
    */
}

function maxRating(ratings) {
    /*
    VocÃª deve implementar a funÃ§Ã£o maxRating, que recebe um array de arrays representando pedidos em um fast food. Cada pedido Ã© um array contendo dois valores:
  
    Quantidade do pedido (um nÃºmero inteiro positivo)
    Nota do pedido (um nÃºmero inteiro de 1 a 5)
    O objetivo Ã© encontrar o pedido com a maior nota. Caso haja mais de um pedido com a mesma nota mÃ¡xima, deve-se retornar aquele que tem a menor quantidade.

    1 Exemplo de Entrada e SaÃ­da
    ğŸ”¹ Entrada:
        [[123, 4], [133, 2], [423, 5], [100, 4]]

    ğŸ”¹ Processamento:
        O pedido com a maior nota Ã© [423, 5], pois tem a maior nota (5).

    ğŸ”¹ SaÃ­da esperada:
        [423, 5]


    2 Exemplo:
    ğŸ”¹ Entrada:
        [[123, 5], [133, 2], [99, 5], [100, 4]]

    ğŸ”¹ Processamento:
        Os pedidos [123, 5] e [99, 5] possuem a maior nota (5).
        Entre eles, [99, 5] tem a menor quantidade.

    ğŸ”¹ SaÃ­da esperada:
        [99, 5]
    */
}

function telVerify(tel) {
    /*
  Objetivo: Criar uma funÃ§Ã£o que verifique e formate um nÃºmero de telefone,
  retornando false se o nÃºmero for invÃ¡lido (nÃ£o tiver 10 dÃ­gitos) ou
  formatando no padrÃ£o (DDD) NNNNNNNN se for vÃ¡lido.

  ğŸ”¹Teste com nÃºmero vÃ¡lido (10 dÃ­gitos):
      telVerify("1198765432")
  
  ğŸ”¹SaÃ­da esperada:
      "(11) 98765432"

  ğŸ”¹Teste com nÃºmero invÃ¡lido (mais de 10 dÃ­gitos):
      telVerify("11987654321")
  
  ğŸ”¹SaÃ­da esperada:
      false

  ğŸ”¹Teste com nÃºmero invÃ¡lido (menos de 10 dÃ­gitos):
      telVerify("11987654")
  
  ğŸ”¹SaÃ­da esperada:
      false
  */
}

function verifyMaxNumbers(arr) {
    /*
    Objetivo: Criar uma funÃ§Ã£o que receba dois arrays de nÃºmeros e retorne
    o maior nÃºmero de cada um deles.

    ğŸ”¹ Exemplo de entrada:
        verifyMaxNumbers([[4, 7, 1], [9, 2, 6]])

    ğŸ”¹ SaÃ­da esperada:
        [7, 9]

    ğŸ”¹ Requisitos:
    - A funÃ§Ã£o deve percorrer os dois arrays separadamente
    - Deve comparar os elementos de cada array e identificar o maior
    - Retornar os dois maiores valores em um novo array
    */

};

function verifyPalidromo(str) {
    /*
    Objetivo: Criar uma funÃ§Ã£o que verifique se uma palavra Ã© um palÃ­ndromo
    (ou seja, se Ã© igual quando lida de trÃ¡s pra frente).

    ğŸ”¹ Exemplo de entrada:
        verifyPalidromo("arara")

    ğŸ”¹ SaÃ­da esperada:
        true

    ğŸ”¹ Outro exemplo:
        verifyPalidromo("cachorro")

    ğŸ”¹ SaÃ­da esperada:
        false

    ğŸ”¹ Requisitos:
    - A funÃ§Ã£o deve inverter a string original
    - Comparar a string invertida com a original
    - Retornar true se forem iguais e false se nÃ£o forem
    */

};

module.exports = {
    some,
    hello,
    totalNum,
    maxRating,
    telVerify
}